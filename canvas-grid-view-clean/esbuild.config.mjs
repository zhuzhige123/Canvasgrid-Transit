import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, existsSync, mkdirSync } from "fs";
import { join } from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// 目标目录 - 默认使用指定路径，也支持环境变量配置
const TARGET_DIR = process.env.OBSIDIAN_PLUGIN_DIR || "D:\\桌面\\obsidian文件 卢曼\\.obsidian\\plugins\\canvans";

// 需要复制的文件
const FILES_TO_COPY = [
    'main.js',
    'manifest.json',
    'styles.css',
    'versions.json'
];

// 确保目标目录存在
function ensureTargetDir() {
    try {
        if (!existsSync(TARGET_DIR)) {
            mkdirSync(TARGET_DIR, { recursive: true });
            console.log(`✅ 创建目标目录: ${TARGET_DIR}`);
        }
        return true;
    } catch (error) {
        console.error(`❌ 无法创建目标目录 ${TARGET_DIR}:`, error.message);
        console.log('💡 提示: 可以设置环境变量 OBSIDIAN_PLUGIN_DIR 来指定自定义路径');
        return false;
    }
}

// 复制文件到目标目录
function copyFiles() {
    console.log('\n📁 复制文件到Obsidian插件目录...');

    let successCount = 0;
    let totalFiles = FILES_TO_COPY.length;

    FILES_TO_COPY.forEach(file => {
        try {
            if (existsSync(file)) {
                const targetPath = join(TARGET_DIR, file);
                copyFileSync(file, targetPath);
                console.log(`✅ 复制: ${file}`);
                successCount++;
            } else {
                console.log(`❌ 文件不存在: ${file}`);
            }
        } catch (error) {
            console.error(`❌ 复制失败 ${file}:`, error.message);
        }
    });

    if (successCount === totalFiles) {
        console.log(`\n🎉 所有文件已成功复制到: ${TARGET_DIR}`);
        console.log('💡 现在可以在Obsidian中重新加载插件了！\n');
    } else {
        console.log(`\n⚠️  部分文件复制失败 (${successCount}/${totalFiles})`);
        console.log(`📍 目标目录: ${TARGET_DIR}\n`);
    }
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2020',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'main.js',
	plugins: [{
		name: 'copy-on-build',
		setup(build) {
			build.onEnd((result) => {
				if (result.errors.length === 0) {
					if (ensureTargetDir()) {
						copyFiles();
					} else {
						console.error('❌ 无法创建目标目录，跳过文件复制');
					}
				} else {
					console.error('❌ 构建失败，跳过文件复制');
				}
			});
		}
	}]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
