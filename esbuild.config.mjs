import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// 目标目录
const targetDir = 'D:\\桌面\\obsidian文件 卢曼\\.obsidian\\plugins\\canvans';

// 确保目标目录存在
function ensureTargetDir() {
	try {
		if (!fs.existsSync(targetDir)) {
			fs.mkdirSync(targetDir, { recursive: true });
			console.log('✅ 创建目标目录:', targetDir);
		}
		return true;
	} catch (error) {
		console.error('❌ 创建目录失败:', error.message);
		return false;
	}
}

// 复制文件到目标目录
function copyFiles() {
	const filesToCopy = [
		'main.js',
		'manifest.json',
		'styles.css',
		'versions.json'
	];

	let successCount = 0;

	filesToCopy.forEach(file => {
		try {
			const sourcePath = path.join(process.cwd(), file);
			const targetPath = path.join(targetDir, file);

			if (fs.existsSync(sourcePath)) {
				fs.copyFileSync(sourcePath, targetPath);
				console.log(`✅ 复制文件: ${file}`);
				successCount++;
			} else {
				console.warn(`⚠️  源文件不存在: ${file}`);
			}
		} catch (error) {
			console.error(`❌ 复制文件失败 ${file}:`, error.message);
		}
	});

	console.log(`🎉 复制完成! 成功复制 ${successCount}/${filesToCopy.length} 个文件到 ${targetDir}`);
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2020',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'main.js',
	plugins: [{
		name: 'copy-on-build',
		setup(build) {
			build.onEnd((result) => {
				if (result.errors.length === 0) {
					if (ensureTargetDir()) {
						copyFiles();
					} else {
						console.error('❌ 无法创建目标目录，跳过文件复制');
					}
				} else {
					console.error('❌ 构建失败，跳过文件复制');
				}
			});
		}
	}]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
